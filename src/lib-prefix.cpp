#include <memory>
#include <assert.h>

/**
 * Version that has to match the version generated
 * by zserio.
 */
#define ZSR_VERSION 1

/* Public */
#include "zsr/types.hpp"
#include "zsr/error.hpp"
#include "zsr/find.hpp"
#include "zsr/stub.hpp"

namespace zsr {

/**
 * Traits for checking if a type is zserio generated.
 *
 * Note: Specializations are generated by
 *       zserio cpp_reflect generator macros.
 */
template <class _T>
struct is_compound : std::false_type {};

template <class _T>
struct meta_for_compound;

}

/* Private */
#include "type-traits.hpp"
#include "tmp-helper.hpp"
#include "parameterlist-helper.hpp"
#include "fiel-accessor-helper.hpp"
#include "c-type-helper.hpp"

#include "reflection-macros.hpp"

/* -- Generated Source Begins Here -- */
#ifdef REFLECTION_DEFS_INCLUDE
#    include REFLECTION_DEFS_INCLUDE
#else
#    error "Missing definition of 'REFLECTION_DEFS_INCLUDE'!"
#endif

/* Generate optional load stub */
#ifdef ZSR_GENERATE_LOAD_STUB
namespace zsr {
void loadStub() {}
}
#endif
