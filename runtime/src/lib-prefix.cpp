#include <memory>
#include <cassert>
#include <cstring>

/**
 * Version that has to match the version generated
 * by zserio.
 */
#define ZSR_VERSION 2

/* Public */
#include "zsr/types.hpp"
#include "zsr/error.hpp"
#include "zsr/find.hpp"
#include "zsr/stub.hpp"

namespace zsr {

/**
 * Traits for checking if a type is zserio generated.
 *
 * Note: Specializations are generated by
 *       zserio cpp_reflect generator macros.
 */
template <class _T>
struct is_compound : std::false_type {};

template <class _T>
struct meta_for_compound;

template <class _T>
struct is_enumeration : std::false_type {};

}

/* Private */
#include "type-traits.hpp"
#include "tmp-helper.hpp"
#include "parameterlist-helper.hpp"
#include "fiel-accessor-helper.hpp"
#include "c-type-helper.hpp"

#include "reflection-macros.hpp"

[[maybe_unused]]
static auto identToSnake(const char* ident)
{
    std::string snake;
    snake.reserve(strlen(ident) + 1);

    auto wasLower = islower(*ident);
    do {
        if (isupper(*ident) && wasLower)
            snake.push_back('_');
        snake.push_back((char)tolower(*ident));
        wasLower = islower(*ident);
    } while (*++ident);

    return snake;
}

static std::vector<const zsr::Package*>& lpackages()
{
    static std::vector<const zsr::Package*> packages;
    return packages;
}

/* -- Generated Source Begins Here -- */
#ifdef REFLECTION_DEFS_INCLUDE
#    include REFLECTION_DEFS_INCLUDE
#else
#    error "Missing definition of 'REFLECTION_DEFS_INCLUDE'!"
#endif

namespace zsr
{

const std::vector<const Package*>& packages ()
{
    return lpackages();
}

}
